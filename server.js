const express = require('express');
const puppeteer = require('puppeteer');
const fetch = require('node-fetch');

const app = express();
const PORT = process.env.PORT || 3000;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  URL: 'https://donor-mos.online/account/',
  EMAIL: 'vokelood@gmail.com',
  PASSWORD: 'EightLifes8',
  BOT_TOKEN: '8465771110:AAH7D2ThT0RF2EbeLzkxnsvrdUkBmxQbmqc',
  CHAT_ID: '487525838',
  SHEETS_URL: 'https://script.google.com/macros/s/AKfycbyMKh6Prt9Rf4nd6xmf5n-jqWxlkNg_OE6-9Zp20UUmAZqte0crFpVvonWedCYnXLTA/exec',
  TWOCAPTCHA_API_KEY: '60441485da02e2db24facdcd5c6ef9d9'
};

let browser = null;
let page = null;
let isLoggedIn = false;
let lastDates = new Set();

// ===========================
// –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
// ===========================

// –†–µ—à–µ–Ω–∏–µ Yandex SmartCaptcha —á–µ—Ä–µ–∑ 2Captcha HTTP API
async function solveYandexCaptcha(pageUrl, siteKey) {
  console.log('[CAPTCHA] –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–ø—á–∏ –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ...');

  try {
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á–∏
    const inUrl = `https://2captcha.com/in.php?key=${CONFIG.TWOCAPTCHA_API_KEY}&method=yandex&sitekey=${siteKey}&pageurl=${encodeURIComponent(pageUrl)}&json=1`;
    const inResponse = await fetch(inUrl);
    const inData = await inResponse.json();

    if (inData.status !== 1) {
      console.log('[CAPTCHA] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', inData);
      return null;
    }

    const taskId = inData.request;
    console.log(`[CAPTCHA] ID –∑–∞–¥–∞—á–∏: ${taskId}`);

    // Polling —Ä–µ—à–µ–Ω–∏—è (–¥–æ 60 —Å–µ–∫—É–Ω–¥)
    for (let i = 0; i < 12; i++) {
      await new Promise(resolve => setTimeout(resolve, 5000));

      const resUrl = `https://2captcha.com/res.php?key=${CONFIG.TWOCAPTCHA_API_KEY}&action=get&id=${taskId}&json=1`;
      const resResponse = await fetch(resUrl);
      const resData = await resResponse.json();

      if (resData.status === 1) {
        console.log('[CAPTCHA] ‚úÖ –†–µ—à–µ–Ω–∞');
        return resData.request;
      } else if (resData.request !== 'CAPCHA_NOT_READY') {
        console.log('[CAPTCHA] –û—à–∏–±–∫–∞:', resData);
        return null;
      }
    }

    console.log('[CAPTCHA] Timeout');
    return null;
  } catch (err) {
    console.log('[CAPTCHA] –û—à–∏–±–∫–∞:', err.message);
    return null;
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
async function sendTelegramNotification(dates) {
  const message = `üö® –ù–æ–≤—ã–µ –¥–∞—Ç—ã: ${dates.join(', ')}`;

  for (let i = 0; i < 3; i++) {
    try {
      await fetch(`https://api.telegram.org/bot${CONFIG.BOT_TOKEN}/sendMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: CONFIG.CHAT_ID,
          text: message
        })
      });
    } catch (err) {
      console.log('[TELEGRAM] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏');
    }
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞—Ç –≤ Google Sheets
async function saveDatesToSheets(dates) {
  try {
    await fetch(`${CONFIG.SHEETS_URL}?action=saveDates`, {
      method: 'POST',
      body: JSON.stringify({ dates: Array.from(dates) })
    });
  } catch (err) {
    console.log('[SHEETS] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞—Ç');
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞—Ç –∏–∑ Google Sheets
async function loadDatesFromSheets() {
  try {
    const response = await fetch(`${CONFIG.SHEETS_URL}?action=getDates`);
    const data = await response.json();
    return new Set(data.dates || []);
  } catch (err) {
    console.log('[SHEETS] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞—Ç');
    return new Set();
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ cookies
async function saveCookies(cookies) {
  try {
    await fetch(`${CONFIG.SHEETS_URL}?action=saveCookies`, {
      method: 'POST',
      body: JSON.stringify({ cookies })
    });
  } catch (err) {
    console.log('[COOKIES] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ cookies
async function loadCookies() {
  try {
    const response = await fetch(`${CONFIG.SHEETS_URL}?action=getCookies`);
    const data = await response.json();
    return data.cookies || [];
  } catch (err) {
    console.log('[COOKIES] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
    return [];
  }
}

// ===========================
// –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê
// ===========================

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
async function initBrowser() {
  if (browser) return;

  console.log('[INIT] –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞...');

  browser = await puppeteer.launch({
    headless: true,
    executablePath: process.env.PUPPETEER_EXECUTABLE_PATH || puppeteer.executablePath(),
    args: [
      '--no-sandbox',
      '--disable-setuid-sandbox',
      '--disable-dev-shm-usage',
      '--disable-gpu',
      '--single-process',
      '--js-flags=--max-old-space-size=256'
    ]
  });

  page = await browser.newPage();
  await page.setViewport({ width: 1280, height: 800 });

  // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ç–æ–ª—å–∫–æ —Ç—è–∂—ë–ª—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º —Å–∫—Ä–∏–ø—Ç—ã –∏ XHR)
  await page.setRequestInterception(true);
  page.on('request', (req) => {
    const resourceType = req.resourceType();
    if (['image', 'font', 'media'].includes(resourceType)) {
      req.abort();
    } else {
      req.continue();
    }
  });

  // –ó–∞–≥—Ä—É–∑–∫–∞ cookies
  const cookies = await loadCookies();
  if (cookies.length > 0) {
    await page.setCookie(...cookies);
    console.log(`[INIT] –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${cookies.length} cookies`);
  }

  await page.goto(CONFIG.URL, { waitUntil: 'networkidle2', timeout: 30000 });
  console.log('[INIT] –ì–æ—Ç–æ–≤–æ');
}

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–∞–ø—á–∏
async function login() {
  console.log('[AUTH] –ù–∞—á–∞–ª–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π URL - –µ—Å–ª–∏ –Ω–µ –Ω–∞ account, –ø–µ—Ä–µ—Ö–æ–¥–∏–º
  if (!page.url().includes('/account')) {
    await page.goto(CONFIG.URL, { waitUntil: 'networkidle2' });
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞: —É–∂–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω—ã?
  const hasAccountInfo = await page.$('.account-info');
  if (hasAccountInfo) {
    console.log('[AUTH] ‚úÖ –£–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã');
    isLoggedIn = true;
    return true;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–æ—Ä–º—ã –ª–æ–≥–∏–Ω–∞
  const hasLoginForm = await page.$('input[name="log"]');
  if (!hasLoginForm) {
    console.log('[AUTH] –§–æ—Ä–º–∞ –ª–æ–≥–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
    await page.reload({ waitUntil: 'networkidle2' });
  }

  // –í–≤–æ–¥ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è
  await page.waitForSelector('input[name="log"]', { timeout: 5000 });

  // –û—á–∏—â–∞–µ–º –ø–æ–ª—è –ø–µ—Ä–µ–¥ –≤–≤–æ–¥–æ–º
  await page.evaluate(() => {
    document.querySelector('input[name="log"]').value = '';
    document.querySelector('input[name="pwd"]').value = '';
  });

  await page.type('input[name="log"]', CONFIG.EMAIL);
  await page.type('input[name="pwd"]', CONFIG.PASSWORD);

  console.log('[AUTH] –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–∫–∏
  const hasButton = await page.$('button#wp-submit');
  if (!hasButton) {
    console.log('[AUTH] ‚ùå –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    return false;
  }

  await page.click('button#wp-submit');

  // –ñ–¥—ë–º –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
  await new Promise(resolve => setTimeout(resolve, 3000));

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º: –ø–æ—è–≤–∏–ª–∞—Å—å –ª–∏ –∫–∞–ø—á–∞ –≤ HTML?
  const pageHtml = await page.content();
  const sitekeyMatch = pageHtml.match(/sitekey['":\s=]+['"]?([a-zA-Z0-9_-]{30,})['"]?/i);

  if (sitekeyMatch) {
    const sitekey = sitekeyMatch[1];
    console.log(`[AUTH] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–∞–ø—á–∞: ${sitekey}`);

    // –†–µ—à–∞–µ–º –∫–∞–ø—á—É
    const token = await solveYandexCaptcha(page.url(), sitekey);
    if (!token) {
      console.log('[AUTH] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ—à–∏—Ç—å –∫–∞–ø—á—É');
      return false;
    }

    // –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É –Ω–∞–ø—Ä—è–º—É—é
    console.log('[AUTH] –í—Å—Ç–∞–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã');
    await page.evaluate((token) => {
      let input = document.querySelector('input[name="smart-token"]');
      if (!input) {
        input = document.createElement('input');
        input.type = 'hidden';
        input.name = 'smart-token';
        document.querySelector('form').appendChild(input);
      }
      input.value = token;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ submit() –≤–º–µ—Å—Ç–æ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ
      const form = document.querySelector('form');
      if (form) {
        form.submit();
      }
    }, token);

    await new Promise(resolve => setTimeout(resolve, 3000));
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const accountInfo = await page.$('.account-info');
  if (accountInfo) {
    console.log('[AUTH] ‚úÖ –£—Å–ø–µ—à–Ω–æ');
    isLoggedIn = true;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º cookies
    const cookies = await page.cookies();
    await saveCookies(cookies);

    return true;
  }

  console.log('[AUTH] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å');
  isLoggedIn = false;
  return false;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç
async function checkDates() {
  console.log('[CHECK] –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç');

  if (!isLoggedIn) {
    const success = await login();
    if (!success) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è');
    }
  }

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º reload –≤–º–µ—Å—Ç–æ goto –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
  console.log('[CHECK] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
  await page.reload({ waitUntil: 'networkidle2' });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º –¥–∞—Ç
  const stillLoggedIn = await page.$('.account-info');
  if (!stillLoggedIn) {
    console.log('[CHECK] –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...');
    isLoggedIn = false;
    const success = await login();
    if (!success) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è');
    }
    // –ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —É–∂–µ –Ω–∞ –Ω—É–∂–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –Ω–µ –Ω—É–∂–µ–Ω goto
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞—Ç (–í–°–ï –¥–∞—Ç—ã, –Ω–µ —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏)
  const dates = await page.evaluate(() => {
    const rows = document.querySelectorAll('tr.dates-table__item');
    return Array.from(rows).map(row => {
      const dateCell = row.querySelector('td.table-item__date');
      if (!dateCell) return null;

      const dateText = dateCell.innerText.trim();
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–Ω–æ–ø–∫–∞ "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å" (–¥–æ—Å—Ç—É–ø–Ω–∞—è –¥–∞—Ç–∞)
      const hasBookButton = row.querySelector('button.btn-primary') !== null;

      return { date: dateText, available: hasBookButton };
    }).filter(d => d && d.date);
  });

  if (dates.length === 0) {
    console.log('[CHECK] –¢–∞–±–ª–∏—Ü–∞ –¥–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    return { newDates: [], allDates: [] };
  }

  // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã (—Å –∫–Ω–æ–ø–∫–æ–π "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å")
  const availableDates = dates.filter(d => d.available).map(d => d.date);
  const allDatesStr = dates.map(d => `${d.date}${d.available ? '‚úÖ' : '‚ùå'}`);

  console.log(`[CHECK] –ù–∞–π–¥–µ–Ω–æ –¥–∞—Ç: ${dates.length} (–¥–æ—Å—Ç—É–ø–Ω—ã—Ö: ${availableDates.length})`);
  console.log(`[CHECK] –î–∞—Ç—ã: ${allDatesStr.join(', ')}`);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç
  const currentDates = new Set(availableDates);
  const newDates = [...currentDates].filter(d => !lastDates.has(d));

  if (newDates.length > 0 && lastDates.size > 0) {
    console.log(`[CHECK] üö® –ù–æ–≤—ã–µ –¥–∞—Ç—ã: ${newDates.join(', ')}`);
    await sendTelegramNotification(newDates);
  }

  lastDates = currentDates;
  await saveDatesToSheets(currentDates);

  return { newDates, allDates: availableDates };
}

// ===========================
// API ENDPOINTS
// ===========================

app.get('/check', async (req, res) => {
  console.log('[API] –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É');

  try {
    await initBrowser();
    const result = await checkDates();

    // Garbage collection
    if (global.gc) global.gc();

    res.json({
      success: true,
      newDates: result.newDates,
      allDates: result.allDates,
      timestamp: new Date().toISOString()
    });
  } catch (err) {
    console.log('[ERROR]', err.message);
    isLoggedIn = false;
    res.json({
      success: false,
      error: err.message
    });
  }
});

app.get('/ping', (req, res) => {
  res.send('OK');
});

app.get('/', (req, res) => {
  res.send('Trombocity Monitor Running');
});

// ===========================
// –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê
// ===========================

app.listen(PORT, async () => {
  console.log(`[SERVER] –ó–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–∞—Ç
  lastDates = await loadDatesFromSheets();
  console.log(`[INIT] –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${lastDates.size} –¥–∞—Ç –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞`);

  // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
  try {
    await initBrowser();
    await checkDates();
  } catch (err) {
    console.log('[STARTUP] –û—à–∏–±–∫–∞ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏:', err.message);
  }

  // Self-ping –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
  setInterval(async () => {
    try {
      await fetch(`http://localhost:${PORT}/ping`);
    } catch (e) {}
  }, 5 * 60 * 1000);
});

// Graceful shutdown
process.on('SIGTERM', async () => {
  console.log('[SHUTDOWN] –ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞');
  if (browser) await browser.close();
  process.exit(0);
});
