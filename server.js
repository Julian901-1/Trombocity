const express = require('express');
const puppeteer = require('puppeteer');
const fetch = require('node-fetch');

const app = express();
const PORT = process.env.PORT || 3000;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  URL: 'https://donor-mos.online/account/',
  EMAIL: 'vokelood@gmail.com',
  PASSWORD: 'EightLifes8',
  BOT_TOKEN: '8465771110:AAH7D2ThT0RF2EbeLzkxnsvrdUkBmxQbmqc',
  CHAT_ID: '487525838'
};

// –•—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∞—Ç (–≤ –ø–∞–º—è—Ç–∏)
let lastDates = new Set();
let browser = null;
let isChecking = false;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ (–ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏)
async function initBrowser() {
  if (!browser) {
    console.log('[INIT] –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ Puppeteer...');
    browser = await puppeteer.launch({
      headless: true,
      executablePath: process.env.PUPPETEER_EXECUTABLE_PATH || puppeteer.executablePath(),
      args: [
        '--no-sandbox',
        '--disable-setuid-sandbox',
        '--disable-dev-shm-usage',
        '--disable-gpu',
        '--no-first-run',
        '--no-zygote',
        '--single-process'
      ]
    });
    console.log('[INIT] –ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω');
  }
  return browser;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async function sendTelegramMessage(text) {
  const url = `https://api.telegram.org/bot${CONFIG.BOT_TOKEN}/sendMessage`;

  try {
    await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: CONFIG.CHAT_ID,
        text: text,
        parse_mode: 'HTML'
      })
    });
  } catch (error) {
    console.error('[TELEGRAM] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error.message);
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–∞—Ç
async function checkDates() {
  if (isChecking) {
    console.log('[CHECK] –ü—Ä–µ–¥—ã–¥—É—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –µ—â–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
    return { success: false, message: 'Already checking' };
  }

  isChecking = true;
  const startTime = Date.now();

  try {
    const browser = await initBrowser();
    const page = await browser.newPage();

    // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –æ—Ç–∫–ª—é—á–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ CSS
    await page.setRequestInterception(true);
    page.on('request', (req) => {
      if (['image', 'stylesheet', 'font'].includes(req.resourceType())) {
        req.abort();
      } else {
        req.continue();
      }
    });

    console.log('[CHECK] –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
    await page.goto(CONFIG.URL, { waitUntil: 'domcontentloaded', timeout: 30000 });

    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    console.log('[AUTH] –í–≤–æ–¥ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è...');
    await page.type('input[name="log"]', CONFIG.EMAIL);
    await page.type('input[name="pwd"]', CONFIG.PASSWORD);

    console.log('[AUTH] –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
    await Promise.all([
      page.waitForNavigation({ waitUntil: 'domcontentloaded', timeout: 30000 }),
      page.click('button#wp-submit')
    ]);

    console.log('[PARSE] –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞—Ç –∏–∑ —Ç–∞–±–ª–∏—Ü—ã...');

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è"
    const availableDates = await page.evaluate(() => {
      const dates = [];
      const rows = document.querySelectorAll('tr.dates-table__item');

      rows.forEach(row => {
        const dateCell = row.querySelector('.table-item__date');
        const btnCell = row.querySelector('.table-item__btn');

        if (dateCell && btnCell) {
          const dateText = dateCell.textContent.trim();
          const hasBookButton = btnCell.querySelector('button.btn-primary') !== null;

          if (hasBookButton) {
            dates.push(dateText);
          }
        }
      });

      return dates;
    });

    await page.close();

    const currentDates = new Set(availableDates);
    console.log(`[RESULT] –ù–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç: ${availableDates.length} - ${availableDates.join(', ')}`);

    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
    const newDates = [...currentDates].filter(date => !lastDates.has(date));

    if (newDates.length > 0) {
      console.log(`[ALERT] üö® –ù–æ–≤—ã–µ –¥–∞—Ç—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã: ${newDates.join(', ')}`);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 3 —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥—Ä—è–¥
      const message = `‚ÄºÔ∏è –ù–û–í–ê–Ø –î–ê–¢–ê –î–õ–Ø –î–û–ù–ê–¶–ò–ò ‚ÄºÔ∏è\n\nüìÖ ${newDates.join(', ')}\n\nüîó https://donor-mos.online/account/`;

      for (let i = 0; i < 3; i++) {
        await sendTelegramMessage(message);
        await new Promise(resolve => setTimeout(resolve, 500)); // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    lastDates = currentDates;

    const duration = Date.now() - startTime;
    console.log(`[CHECK] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${duration}ms\n`);

    return {
      success: true,
      dates: availableDates,
      newDates: newDates,
      duration: duration
    };

  } catch (error) {
    console.error('[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error.message);
    return { success: false, error: error.message };
  } finally {
    isChecking = false;
  }
}

// API endpoints
app.get('/', (req, res) => {
  res.json({
    status: 'running',
    service: 'Trombocity Donor Monitor',
    lastCheck: lastDates.size > 0 ? Array.from(lastDates) : 'No data yet'
  });
});

app.get('/check', async (req, res) => {
  console.log('[API] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É');
  const result = await checkDates();
  res.json(result);
});

app.get('/ping', (req, res) => {
  res.json({ status: 'alive', timestamp: new Date().toISOString() });
});

// –°–∞–º–æ–ø–∏–Ω–≥–æ–≤–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –∑–∞—Å—ã–ø–∞–Ω–∏—è)
const SELF_PING_INTERVAL = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

async function selfPing() {
  try {
    const appUrl = process.env.RENDER_EXTERNAL_URL || 'http://localhost:3000';
    await fetch(`${appUrl}/ping`);
    console.log('[HEARTBEAT] Self-ping —É—Å–ø–µ—à–µ–Ω');
  } catch (error) {
    console.log('[HEARTBEAT] Self-ping (–Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)');
  }
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, async () => {
  console.log(`\nüöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: ${CONFIG.URL}`);
  console.log(`‚è∞ Heartbeat: –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç\n`);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±—Ä–∞—É–∑–µ—Ä –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
  await initBrowser();

  // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
  console.log('[STARTUP] –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...');
  await checkDates();

  // –ó–∞–ø—É—Å–∫–∞–µ–º heartbeat
  setInterval(selfPing, SELF_PING_INTERVAL);
});

// Graceful shutdown
process.on('SIGTERM', async () => {
  console.log('[SHUTDOWN] –ü–æ–ª—É—á–µ–Ω SIGTERM, –∑–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞...');
  if (browser) {
    await browser.close();
  }
  process.exit(0);
});
